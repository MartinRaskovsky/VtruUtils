#!/usr/bin/env node

/**
 * generate_constants.js
 *
 * Generates constants.generated.js from section-config.js
 * DO NOT EDIT THE GENERATED FILE BY HAND
 *
 * Author: Dr. Martín Raskovsky
 * Date: April 2025
 */

const fs = require("fs");
const path = require("path");
const config = require("./section-config");

const outputFile = path.join(__dirname, "../shared/constants.generated.js");

let lines = [];

lines.push("#!/usr/bin/env node\n");
lines.push("/**");
lines.push(" * constants.generated.js");
lines.push(" *");
lines.push(" * GENERATED FILE — DO NOT EDIT BY HAND");
lines.push(" * Generated by generate_constants.js from section-config.js");
lines.push(" *");
lines.push(" * Author: Dr. Martín Raskovsky");
lines.push(" * Date: April 2025");
lines.push(" */\n");

// === NETWORKS ===
lines.push("// Networks");
for (const net of Object.keys(config.networks)) {
  lines.push(`const NET_${net} = "${net}";`);
}
lines.push("");

// === SECTION CONSTANTS (grouped) ===
const grouped = {};
for (const section of config.sections) {
  const group = section.group || "Ungrouped";
  if (!grouped[group]) grouped[group] = [];
  grouped[group].push(section);
}

for (const group of Object.keys(grouped)) {
  lines.push(`// ${group}`);
  for (const s of grouped[group]) {
    if (!s.key || !s.label) {
      console.warn(`❌ Missing key/label in section:`, s);
      continue;
    }
    lines.push(`const SEC_${s.key} = "${s.label}";`);
  }
  lines.push("");
}

// === Section Summary ===
lines.push("// Section mapping for summary with subsections");
lines.push("const sectionSummary = [");
for (const group of Object.keys(grouped)) {
  const keys = grouped[group].map(s => `SEC_${s.key}`).join(", ");
  lines.push(`  { name: "${group}", sections: [${keys}] },`);
}
lines.push("];\n");

// === Network Labels ===
lines.push("// Mapping of network codes to full labels");
lines.push("const networkLabels = {");
for (const [code, label] of Object.entries(config.networks)) {
  lines.push(`  "${code}": "${label}",`);
}
lines.push("};\n");

// === Detail Types ===
lines.push("// Section mapping for details popups");
lines.push("const detailType = {");
for (const [key, val] of Object.entries(config.detailType || {})) {
  lines.push(`  [SEC_${key}]: "${val}",`);
}
lines.push("};\n");

// === hasGroups ===
lines.push("// These grouping defs are needed also in perl-lib/Defs.pm: %group_type_map");
lines.push("const hasGroups = {");
for (const [key, val] of Object.entries(config.hasGroups || {})) {
  lines.push(`  [SEC_${key}]: ${val},`);
}
lines.push("};\n");

// === Export block (Node.js and Browser) ===
const allKeys = config.sections.map(s => `SEC_${s.key}`);

lines.push("if (typeof module !== 'undefined' && module.exports) {");
lines.push("  module.exports = {");
for (const key of allKeys) lines.push(`    ${key},`);
for (const net of Object.keys(config.networks)) lines.push(`    NET_${net},`);
lines.push("    detailType,");
lines.push("    hasGroups,");
lines.push("    sectionSummary");
lines.push("  };");
lines.push("}\n");

lines.push("if (typeof window !== \"undefined\") {");
lines.push("  window.constants = {");
for (const key of allKeys) lines.push(`    ${key},`);
for (const net of Object.keys(config.networks)) lines.push(`    NET_${net},`);
lines.push("    detailType,");
lines.push("    hasGroups,");
lines.push("    sectionSummary");
lines.push("  };");
lines.push("}");

fs.writeFileSync(outputFile, lines.join("\n"));
console.log(`✅ constants.generated.js written→ ${outputFile}`);

